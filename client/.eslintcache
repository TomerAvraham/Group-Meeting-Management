[{"C:\\Users\\97250\\Desktop\\task3\\client\\src\\index.js":"1","C:\\Users\\97250\\Desktop\\task3\\client\\src\\App.js":"2","C:\\Users\\97250\\Desktop\\task3\\client\\src\\components\\Form.jsx":"3","C:\\Users\\97250\\Desktop\\task3\\client\\src\\components\\MeetingList.jsx":"4","C:\\Users\\97250\\Desktop\\task3\\client\\src\\components\\Meet.jsx":"5"},{"size":221,"mtime":1606636174777,"results":"6","hashOfConfig":"7"},{"size":203,"mtime":1606636342901,"results":"8","hashOfConfig":"7"},{"size":3939,"mtime":1606648803534,"results":"9","hashOfConfig":"7"},{"size":423,"mtime":1606638506888,"results":"10","hashOfConfig":"7"},{"size":1191,"mtime":1606646930002,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9lxjc2",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\97250\\Desktop\\task3\\client\\src\\index.js",[],"C:\\Users\\97250\\Desktop\\task3\\client\\src\\App.js",[],"C:\\Users\\97250\\Desktop\\task3\\client\\src\\components\\Form.jsx",["23","24"],"import React, { useState, useEffect } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MeetingList from \"./MeetingList\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nfunction Form() {\r\n  const [groups, setGroups] = useState([]);\r\n  const [pickedGroupID, setPickedGroupID] = useState(0)\r\n  const [pickGroupMeeting, setPickGroupMeeting] = useState([])\r\n  const [formInputValue, setFormInputValue] = useState({})\r\n\r\n  const fetchGroups = async () => {\r\n    const res = await fetch(\"http://localhost:1000/groups\");\r\n    const data = await res.json();\r\n    setGroups(data);\r\n  };\r\n\r\n  const handelSelectChange = (groupID) => {\r\n      setPickedGroupID(groupID)\r\n      fetchPickedGroupMeting(groupID)\r\n  }\r\n\r\n  const fetchPickedGroupMeting = async (id) => {\r\n      const res = await fetch(`http://localhost:1000/meeting/bygroup/${id}`)\r\n      const data = await res.json()\r\n      setPickGroupMeeting(data)\r\n  }\r\n\r\n  const handelInputChange = (e) => {\r\n    switch (e.target.id) {\r\n        case \"meetingStart\":\r\n            const resStart = e.target.value.replace(\"T\", \" \")\r\n            setFormInputValue(prev => ({...prev, meetingStart:resStart}))\r\n            break;\r\n        case \"meetingEnd\":\r\n            const resEnd = e.target.value.replace(\"T\", \" \")\r\n            setFormInputValue(prev => ({...prev, meetingEnd:resEnd}))\r\n            break;\r\n        case \"description\":\r\n            setFormInputValue(prev => ({...prev, description:e.target.value}))\r\n            break;\r\n        case \"room\":\r\n            setFormInputValue(prev => ({...prev, room:e.target.value}))\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n  }\r\n\r\n  const handelAddButton = async () => {\r\n    const validDate = `${formInputValue.meetingStart.replace(' ', 'T')}:00.000Z`\r\n    const match = pickGroupMeeting.find(m => m.meetingStart == validDate)\r\n    if (match) alert ('Date Already schedule')\r\n    const res = await fetch('http://localhost:1000/meeting/add', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            groupID: pickedGroupID,\r\n            meetingStart: formInputValue.meetingStart,\r\n            meetingEnd: formInputValue.meetingEnd,\r\n            description: formInputValue.description,\r\n            room: formInputValue.room\r\n        }) \r\n      })\r\n    fetchPickedGroupMeting(pickedGroupID)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchGroups();\r\n  }, []);\r\n\r\n  return (\r\n      <>\r\n    <div className=\"form\">\r\n      <div className=\"form__spacing\">\r\n        <Select onChange={(e) => handelSelectChange(e.target.value)}>\r\n          {groups.map((group) => (\r\n              <MenuItem value={group.id}>{group.name}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      <div className=\"form__spacing\">\r\n      <TextField\r\n        id=\"meetingStart\"\r\n        label=\"From\"\r\n        type=\"datetime-local\"\r\n        defaultValue=\"2017-05-24T10:30\"\r\n        onChange={e => handelInputChange(e)}\r\n      />\r\n      </div>\r\n      <div className=\"form__spacing\">\r\n      <TextField\r\n        id=\"meetingEnd\"\r\n        label=\"To\"\r\n        type=\"datetime-local\"\r\n        defaultValue=\"2017-05-24T10:30\"\r\n        onChange={e => handelInputChange(e)}\r\n      />\r\n      </div>\r\n      <div className=\"input__group\">\r\n        <TextField onChange={e => handelInputChange(e)} id=\"description\"  label=\"Description\" />\r\n        <TextField onChange={e => handelInputChange(e)} id=\"room\"  label=\"Room\" />\r\n      </div>\r\n      <div className=\"form__spacing\">\r\n      <Button onClick={handelAddButton} variant=\"contained\" color=\"primary\">\r\n        ADD\r\n      </Button>\r\n      </div>\r\n    </div>\r\n    <div className=\"form__spacing\">\r\n        <MeetingList meets={pickGroupMeeting}/>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","C:\\Users\\97250\\Desktop\\task3\\client\\src\\components\\MeetingList.jsx",[],"C:\\Users\\97250\\Desktop\\task3\\client\\src\\components\\Meet.jsx",[],{"ruleId":"25","severity":1,"message":"26","line":56,"column":61,"nodeType":"27","messageId":"28","endLine":56,"endColumn":63},{"ruleId":"29","severity":1,"message":"30","line":58,"column":11,"nodeType":"31","messageId":"32","endLine":58,"endColumn":14},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar"]